{"version":3,"sources":["DataViewer/Table/index.js","DataViewer/dataService.js","DataViewer/index.js","Demo/data-1.config.js","Demo/index.js","serviceWorker.js","index.js"],"names":["MAX_COLSPAN","Table","_ref","header","columns","rows","onDelete","react_default","a","createElement","className","colSpan","map","col","key","filter","row","deleted","rowIndex","Row","Object","assign","cells","_ref2","children","deleting","_useState","useState","_useState2","slicedToArray","visibleChildren","setVisibleChildren","_useState3","_useState4","deleteHover","setDeleteHover","handleEnableDeleteHover","handleDisableDeleteHover","handleDelete","e","stopPropagation","lastCellIndex","length","hasChildren","_ref3","some","r","hasChildrenClass","rowIndexClass","deleteClass","expandedClass","Fragment","concat","onClick","title","undefined","index_es","icon","faCaretRight","Array","from","cell","cellIndex","faTrashAlt","onMouseEnter","onMouseLeave","child","childIndex","Table_Table","objectSpread","RowType","T","arrayOf","node","isRequired","bool","defaultProps","identityFn","x","tabulate","array","arguments","columnIndex","forEach","obj","objIndex","defineProperty","keys","value","isArray","push","DataViewer","tableProps","data","standardize","deleteOnServer","tabulated","setTabulated","useEffect","standardized","TypeError","forceUpdate","ms","serverPromise","Promise","resolve","returned","toConsumableArray","c","then","all","setTimeout","catch","er","alert","console","error","useTable","DataViewer_Table","itemMapper","item","kids","records","childrenLengths","includes","id","len","log","relativeId","patientId","deleteRelationApi","phoneId","Demo","src_DataViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_Demo_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c300bea1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport T from 'prop-types'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCaretRight, faTrashAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport './index.css'\r\n\r\nconst MAX_COLSPAN = 42 // more than reasonable amount of max columns\r\nfunction Table({header, columns, rows, onDelete}) {\r\n  return (\r\n    <table className=\"Table\">\r\n      <thead>\r\n        {header ? (\r\n          <tr>\r\n            <td className=\"Table-aboveHeader\" colSpan={MAX_COLSPAN}>\r\n              {header}\r\n            </td>\r\n          </tr>\r\n        ) : null}\r\n        <tr className=\"Table-columns\">\r\n          <th /* first column label empty, for > buttons */ />\r\n          {columns.map((col) => (\r\n            <th key={col}>{col}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rows\r\n          .filter((row) => !row.deleted)\r\n          .map((row, rowIndex) => (\r\n            <Row key={row.cells} {...{columns, row, rowIndex, onDelete}} />\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nfunction Row({columns, row, rowIndex, onDelete}) {\r\n  const {cells, children, deleting} = row\r\n\r\n  // TODO: extract logic to custom hook (useRowState), convert Row to dumb component and combine in DataViewer\r\n  const [visibleChildren, setVisibleChildren] = useState(0)\r\n  const [deleteHover, setDeleteHover] = useState(false)\r\n\r\n  const handleMore = () =>\r\n    setVisibleChildren(visibleChildren ? 2 * visibleChildren : 10)\r\n  const handleLess = () => setVisibleChildren(0)\r\n  const handleToggle = () => (visibleChildren ? handleLess() : handleMore())\r\n  const handleEnableDeleteHover = () => setDeleteHover(true)\r\n  const handleDisableDeleteHover = () => setDeleteHover(false)\r\n  const handleDelete = (e) => {\r\n    // prevent handleToggle\r\n    e.stopPropagation()\r\n    // TODO: confirmation dialog and/or undo\r\n    // TODO: use an explicit identifier instead of object identity\r\n    onDelete(columns, row)\r\n  }\r\n\r\n  const lastCellIndex = cells.length - 1\r\n  const hasChildren = children.filter(({rows: childRows}) =>\r\n    childRows.some((r) => !r.deleted)\r\n  ).length\r\n  const hasChildrenClass = hasChildren ? 'hasChildren' : 'noChildren'\r\n  const rowIndexClass = (rowIndex + 1) % 2 ? 'odd' : 'even'\r\n  // prettier-ignore\r\n  const deleteClass = deleting ? 'deleteStarted' : (deleteHover ? 'deleteHover' : '')\r\n  const expandedClass =\r\n    hasChildren && visibleChildren && !deleting ? 'expanded' : 'collapsed'\r\n\r\n  return (\r\n    <>\r\n      <tr\r\n        className={`Table-row ${hasChildrenClass} ${rowIndexClass} ${deleteClass}`}\r\n        onClick={handleToggle}\r\n        title={deleting ? 'Removing...' : undefined}\r\n      >\r\n        <td className={`Table-toggle ${expandedClass}`}>\r\n          {hasChildren ? (\r\n            <FontAwesomeIcon\r\n              icon={faCaretRight}\r\n              className=\"Table-expand-icon\"\r\n            />\r\n          ) : null}\r\n        </td>\r\n        {// Array.from converts a sparse array into a dense one\r\n        Array.from(cells).map((cell, cellIndex) => (\r\n          <td className=\"Table-cell\" key={cellIndex}>\r\n            {cell}\r\n            {cellIndex === lastCellIndex && !deleting && (\r\n              <FontAwesomeIcon\r\n                icon={faTrashAlt}\r\n                className=\"Table-trash-icon\"\r\n                onClick={handleDelete}\r\n                onMouseEnter={handleEnableDeleteHover}\r\n                onMouseLeave={handleDisableDeleteHover}\r\n                title=\"Remove item\"\r\n              />\r\n            )}\r\n          </td>\r\n        ))}\r\n      </tr>\r\n      {children.map((child, childIndex) => (\r\n        <tr key={childIndex}>\r\n          <td className={`Table-child ${expandedClass}`} colSpan={MAX_COLSPAN}>\r\n            <div>\r\n              {visibleChildren ? <Table {...{...child, onDelete}} /> : null}\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\nconst RowType = {\r\n  cells: T.arrayOf(T.node).isRequired,\r\n  children: T.arrayOf(() => RowType),\r\n  deleting: T.bool.isRequired,\r\n  deleted: T.bool.isRequired,\r\n}\r\n\r\nTable.propTypes = {\r\n  header: T.string,\r\n  columns: T.arrayOf(T.node).isRequired,\r\n  rows: T.arrayOf(T.shape(RowType)).isRequired,\r\n  onDelete: T.func.isRequired,\r\n}\r\nTable.defaultProps = {\r\n  header: undefined,\r\n}\r\n\r\nRow.propTypes = {\r\n  columns: T.arrayOf(T.node).isRequired,\r\n  row: T.shape(RowType),\r\n  rowIndex: T.number.isRequired,\r\n  onDelete: T.func.isRequired,\r\n}\r\n","import {useState, useEffect} from 'react'\n\nconst identityFn = (x) => x\nconst delay = (ms) => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const tabulate = (array = [], header = '') => {\n  const columns = {}\n  const rows = []\n  let columnIndex = 0\n  array.forEach((obj, objIndex) => {\n    // cells might be a sparse Array if column keys are inconsistent\n    const row = {\n      rowIndex: objIndex,\n      cells: [],\n      children: [],\n      deleting: false,\n      deleted: false,\n    }\n    if (typeof obj !== 'object' || !obj) {\n      obj = {[header]: obj}\n    }\n    Object.keys(obj).forEach((key) => {\n      const value = obj[key]\n      if (Array.isArray(value)) {\n        row.children.push(tabulate(value, key))\n        return\n      }\n      if (columns[key] === undefined) {\n        // use column order from 1st item and add new columns from other items to the end\n        columns[key] = columnIndex\n        columnIndex++\n      }\n      const cellIndex = columns[key]\n      row.cells[cellIndex] = value\n    })\n    rows.push(row)\n  })\n  return {header, columns: Object.keys(columns), rows}\n}\n\nexport const useTable = (\n  data = [],\n  standardize = identityFn,\n  deleteOnServer\n) => {\n  const [tabulated, setTabulated] = useState({\n    header: '',\n    columns: [],\n    rows: [],\n  })\n\n  useEffect(() => {\n    const standardized = standardize(data)\n    if (Array.isArray(standardized)) {\n      setTabulated(tabulate(standardized, ''))\n    } else if (!standardized) {\n      throw new TypeError(\n        'standardize function must return some data (use an empty array for no data)'\n      )\n    } else {\n      setTabulated(tabulate([standardized], ''))\n    }\n  }, [])\n\n  const forceUpdate = () => setTabulated(tabulated)\n\n  // TODO: use some id insted of mutating nested `row` object, need to be set up in `standardize`\n  const onDelete = (columns, row) => {\n    row.deleting = true\n    forceUpdate()\n    let serverPromise = Promise.resolve()\n    // TODO: set up deleteOnServer in config, check if confirmation dialog is needed\n    if (deleteOnServer) {\n      const returned = deleteOnServer(\n        [...columns],\n        [...row.cells],\n        row.children.map((c) => c.rows.length)\n      )\n      if (returned && returned.then) {\n        serverPromise = returned\n      }\n    }\n    Promise.all([serverPromise, delay(500)])\n      .then(() => {\n        // forward compatibile with undo feature\n        row.deleted = true\n        forceUpdate()\n      })\n      .catch((er) => {\n        // TODO: ask designer for modal or other error indicator\n        alert(`Removal failed\\n${er}`)\n        console.error(er)\n        row.deleting = false\n        forceUpdate()\n      })\n  }\n\n  return {\n    ...tabulated,\n    onDelete,\n  }\n}\n","import React from 'react'\nimport Table from './Table'\nimport {useTable} from './dataService'\n\nconst DataViewer = ({data, standardize, deleteOnServer}) => {\n  const tableProps = useTable(data, standardize, deleteOnServer)\n\n  return (\n    <div className=\"DataViewer\">\n      <Table {...tableProps} />\n    </div>\n  )\n}\n\nexport default DataViewer\n","// remove hidden properties from data-1.json, that should not be visible in the table\n// (throws for unexpected data shape)\n\nconst itemMapper = (item) => {\n  let kidKeys = item.kids ? Object.keys(item.kids) : []\n  kidKeys.forEach((key) => {\n    item.kids[key] = item.kids[key].records.map(itemMapper)\n  })\n  return {...item.data, ...item.kids}\n}\n\nexport const standardize = (rawData = []) => rawData.map(itemMapper)\n\n// TODO: implement as per backend APIs\nconst deletePersonApi = (id, len) =>\n  Promise.resolve(console.log(`Delete patient ${id} (with ${len} relatives)`))\nconst deleteRelationApi = (relativeId, patientId, len) =>\n  Promise.resolve(\n    console.log(\n      `Delete relative ${relativeId} of patient ${patientId} (with ${len} phones)`\n    )\n  )\nconst deletePhoneApi = (phoneId, relativeId) =>\n  Promise.resolve(\n    console.log(`Delete phone ${phoneId} of relative ${relativeId}`)\n  )\n\nexport const deleteOnServer = (columns, cells, childrenLengths) => {\n  if (columns.includes('Identification number')) {\n    return deletePersonApi(cells[0], childrenLengths[0])\n  } else if (columns.includes('Relative ID')) {\n    return deleteRelationApi(cells[0], cells[1], childrenLengths[0])\n  } else if (columns.includes('Phone ID')) {\n    return deletePhoneApi(cells[0], cells[1])\n  }\n}\n","import React from 'react'\nimport './index.css'\nimport DataViewer from '../DataViewer'\nimport data from './data-1.json'\nimport {standardize, deleteOnServer} from './data-1.config'\n\nconst Demo = () => (\n  <div className=\"Demo\">\n    <header className=\"Demo-header\">DataViewer demo</header>\n    <DataViewer {...{data, standardize, deleteOnServer}} />\n  </div>\n)\n\nexport default Demo\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'babel-polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Demo />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}