{"version":3,"sources":["DataViewer/Table/index.js","DataViewer/dataService.js","DataViewer/index.js","Demo/data-1.config.js","Demo/index.js","serviceWorker.js","index.js"],"names":["MAX_COLSPAN","Table","_ref","header","columns","rows","onDelete","react_default","a","createElement","className","colSpan","map","col","key","row","rowIndex","Row","Object","assign","_ref2","_useState","useState","_useState2","slicedToArray","visibleChildren","setVisibleChildren","hasChildren","children","length","hasChildrenClass","rowIndexClass","expandedClass","Fragment","concat","onClick","index_es","icon","faCaretRight","Array","from","cells","cell","cellIndex","child","childIndex","Table_Table","tabulate","array","arguments","undefined","columnIndex","forEach","obj","defineProperty","keys","value","isArray","push","path","console","log","DataViewer","tableProps","tabulated","data","standardized","TypeError","objectSpread","useTable","standardize","DataViewer_Table","itemMapper","item","kids","records","Demo","src_DataViewer","Boolean","window","location","hostname","match","ReactDOM","render","src_Demo_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i6PAMMA,UAAc,IACpB,SAASC,EAATC,GAAkD,IAAlCC,EAAkCD,EAAlCC,OAAQC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,KAAiBH,EAAXI,SACrC,OACEC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACGN,EACCI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAoBC,QAASX,GACxCG,IAGH,KACJI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,WACCL,EAAQQ,IAAI,SAACC,GAAD,OACXN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAMA,OAIrBN,EAAAC,EAAAC,cAAA,aACGJ,EAAKO,IAAI,SAACG,EAAKC,GAAN,OACRT,EAAAC,EAAAC,cAACQ,EAADC,OAAAC,OAAA,CAAKL,IAAKE,GAAc,CAACD,MAAKC,kBAOxC,SAASC,EAATG,GAA8B,IAAhBL,EAAgBK,EAAhBL,IAAKC,EAAWI,EAAXJ,SAAWK,EACkBC,mBAAS,GAD3BC,EAAAL,OAAAM,EAAA,EAAAN,CAAAG,EAAA,GACrBI,EADqBF,EAAA,GACJG,EADIH,EAAA,GAMtBI,EAAcZ,EAAIa,SAASC,OAC3BC,EAAmBH,EAAc,cAAgB,aACjDI,GAAiBf,EAAW,GAAK,EAAI,MAAQ,OAC7CgB,EAAgBP,EAAkB,WAAa,YAErD,OACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,KACE1B,EAAAC,EAAAC,cAAA,MACEC,UAAS,aAAAwB,OAAeJ,EAAf,KAAAI,OAAmCH,GAC5CI,QAVe,kBADIT,EACGD,EADgB,EADvBA,EAAkB,EAAIA,EAAkB,MAcvDlB,EAAAC,EAAAC,cAAA,MAAIC,UAAS,gBAAAwB,OAAkBF,IAC5BL,EAAcpB,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAiBC,KAAMC,MAAmB,MAG3DC,MAAMC,KAAKzB,EAAI0B,OAAO7B,IAAI,SAAC8B,EAAMC,GAAP,OACxBpC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaI,IAAK6B,GAC7BD,MAIN3B,EAAIa,SAAShB,IAAI,SAACgC,EAAOC,GAAR,OAChBtC,EAAAC,EAAAC,cAAA,MAAIK,IAAK+B,GACPtC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,eAAAwB,OAAiBF,GAAiBrB,QAASX,GACtDO,EAAAC,EAAAC,cAAA,WAAMgB,EAAkBlB,EAAAC,EAAAC,cAACqC,EAAUF,GAAY,WAQ5C3C,wBCxEF8C,EAAW,SAAXA,IAAwC,IAA5BC,EAA4BC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAApB,GAAI9C,EAAgB8C,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAP,GACtC7C,EAAU,GACVC,EAAO,GACT8C,EAAc,EAuBlB,OAtBAH,EAAMI,QAAQ,SAACC,GAEb,IAAMtC,EAAM,CAAC0B,MAAO,GAAIb,SAAU,IACf,kBAARyB,GAAqBA,IAC9BA,EAAGnC,OAAAoC,EAAA,EAAApC,CAAA,GAAKf,EAASkD,IAEnBnC,OAAOqC,KAAKF,GAAKD,QAAQ,SAACtC,GACxB,IAAM0C,EAAQH,EAAIvC,GAClB,GAAIyB,MAAMkB,QAAQD,GAChBzC,EAAIa,SAAS8B,KAAKX,EAASS,EAAO1C,QADpC,MAIqBoC,IAAjB9C,EAAQU,KAEVV,EAAQU,GAAOqC,EACfA,KAEF,IAAMR,EAAYvC,EAAQU,GAC1BC,EAAI0B,MAAME,GAAaa,KAEzBnD,EAAKqD,KAAK3C,KAEL,CAACZ,SAAQC,QAASc,OAAOqC,KAAKnD,GAAUC,SAG3CC,EAAW,SAACqD,GAAD,OAAUC,QAAQC,IAAI,WAAYF,ICfpCG,EAVI,SAAA5D,GAAyB,IACpC6D,EDyBgB,WAA6C,IAE/DC,EAFmBC,EAA4ChB,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAArC,GACxBiB,GAD6DjB,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAnB,SAACgB,GAAD,OAAUA,IACzBA,GAEjC,GAAI1B,MAAMkB,QAAQS,GAChBF,EAAYjB,EAASmB,OAChB,KAAKA,EACV,MAAM,IAAIC,UACR,+EAGFH,EAAYjB,EAAS,CAACmB,IAGxB,OAAOhD,OAAAkD,EAAA,EAAAlD,CAAA,GACF8C,EADL,CAEE1D,aCxCiB+D,CADuBnE,EAAvB+D,KAAuB/D,EAAjBoE,aAGzB,OACE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC8D,EAAUR,cCNXS,EAAa,SAAbA,EAAcC,GAKlB,OAJcA,EAAKC,KAAOxD,OAAOqC,KAAKkB,EAAKC,MAAQ,IAC3CtB,QAAQ,SAACtC,GACf2D,EAAKC,KAAK5D,GAAO2D,EAAKC,KAAK5D,GAAK6D,QAAQ/D,IAAI4D,KAEvCtD,OAAAkD,EAAA,EAAAlD,CAAA,GAAIuD,EAAKR,KAASQ,EAAKC,OAGnBJ,EAAc,kBAAArB,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAW,IAAerC,IAAI4D,ICE1CI,EAPF,kBACXrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAlB,mBACAH,EAAAC,EAAAC,cAACoE,EAAe,CAACZ,OAAMK,kBCGPQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.9e08c49f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport T from 'prop-types'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCaretRight} from '@fortawesome/free-solid-svg-icons'\r\nimport './index.css'\r\n\r\nconst MAX_COLSPAN = 42 // more than reasonable amount of max columns\r\nfunction Table({header, columns, rows, onDelete}) {\r\n  return (\r\n    <table className=\"Table\">\r\n      <thead>\r\n        {header ? (\r\n          <tr>\r\n            <td className=\"Table-aboveHeader\" colSpan={MAX_COLSPAN}>\r\n              {header}\r\n            </td>\r\n          </tr>\r\n        ) : null}\r\n        <tr className=\"Table-columns\">\r\n          <th /* first column label empty, for > buttons */ />\r\n          {columns.map((col) => (\r\n            <th key={col}>{col}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {rows.map((row, rowIndex) => (\r\n          <Row key={rowIndex} {...{row, rowIndex}} />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nfunction Row({row, rowIndex}) {\r\n  const [visibleChildren, setVisibleChildren] = useState(0)\r\n  const handleMore = () =>\r\n    setVisibleChildren(visibleChildren ? 2 * visibleChildren : 10)\r\n  const handleLess = () => setVisibleChildren(0)\r\n  const handleToggle = () => (visibleChildren ? handleLess() : handleMore())\r\n  const hasChildren = row.children.length\r\n  const hasChildrenClass = hasChildren ? 'hasChildren' : 'noChildren'\r\n  const rowIndexClass = (rowIndex + 1) % 2 ? 'odd' : 'even'\r\n  const expandedClass = visibleChildren ? 'expanded' : 'collapsed'\r\n\r\n  return (\r\n    <>\r\n      <tr\r\n        className={`Table-row ${hasChildrenClass} ${rowIndexClass}`}\r\n        onClick={handleToggle}\r\n      >\r\n        <td className={`Table-toggle ${expandedClass}`}>\r\n          {hasChildren ? <FontAwesomeIcon icon={faCaretRight} /> : null}\r\n        </td>\r\n        {// Array.from converts a sparse array into a dense one\r\n        Array.from(row.cells).map((cell, cellIndex) => (\r\n          <td className=\"Table-cell\" key={cellIndex}>\r\n            {cell}\r\n          </td>\r\n        ))}\r\n      </tr>\r\n      {row.children.map((child, childIndex) => (\r\n        <tr key={childIndex}>\r\n          <td className={`Table-child ${expandedClass}`} colSpan={MAX_COLSPAN}>\r\n            <div>{visibleChildren ? <Table {...child} /> : null}</div>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Table\r\n\r\nTable.propTypes = {\r\n  header: T.string,\r\n  columns: T.arrayOf(T.node).isRequired,\r\n  rows: T.arrayOf(\r\n    T.shape({\r\n      cells: T.arrayOf(T.node).isRequired,\r\n      children: T.arrayOf(() => Table.propTypes.tableData),\r\n    })\r\n  ).isRequired,\r\n  onDelete: T.func,\r\n}\r\n","export const tabulate = (array = [], header = '') => {\n  const columns = {}\n  const rows = []\n  let columnIndex = 0\n  array.forEach((obj) => {\n    // cells might be a sparse Array if column keys are inconsistent\n    const row = {cells: [], children: []}\n    if (typeof obj !== 'object' || !obj) {\n      obj = {[header]: obj}\n    }\n    Object.keys(obj).forEach((key) => {\n      const value = obj[key]\n      if (Array.isArray(value)) {\n        row.children.push(tabulate(value, key))\n        return\n      }\n      if (columns[key] === undefined) {\n        // use column order from 1st item and add new columns from other items to the end\n        columns[key] = columnIndex\n        columnIndex++\n      }\n      const cellIndex = columns[key]\n      row.cells[cellIndex] = value\n    })\n    rows.push(row)\n  })\n  return {header, columns: Object.keys(columns), rows}\n}\n\nconst onDelete = (path) => console.log('onDelete', path)\nexport const useTable = (data = [], standardize = (data) => data) => {\n  const standardized = standardize(data)\n  let tabulated\n  if (Array.isArray(standardized)) {\n    tabulated = tabulate(standardized)\n  } else if (!standardized) {\n    throw new TypeError(\n      'standardize function must return some data (use an empty array for no data)'\n    )\n  } else {\n    tabulated = tabulate([standardized])\n  }\n\n  return {\n    ...tabulated,\n    onDelete,\n  }\n}\n","import React from 'react'\nimport Table from './Table'\nimport {useTable} from './dataService'\n\nconst DataViewer = ({data, standardize}) => {\n  const tableProps = useTable(data, standardize)\n\n  return (\n    <div className=\"DataViewer\">\n      <Table {...tableProps} />\n    </div>\n  )\n}\n\nexport default DataViewer\n","// remove hidden properties from data-1.json, that should not be visible in the table\n// (throws for unexpected data shape)\n\nconst itemMapper = (item) => {\n  let kidKeys = item.kids ? Object.keys(item.kids) : []\n  kidKeys.forEach((key) => {\n    item.kids[key] = item.kids[key].records.map(itemMapper)\n  })\n  return {...item.data, ...item.kids}\n}\n\nexport const standardize = (rawData = []) => rawData.map(itemMapper)\n","import React from 'react'\nimport './index.css'\nimport DataViewer from '../DataViewer'\nimport data from './data-1.json'\nimport {standardize} from './data-1.config'\n\nconst Demo = () => (\n  <div className=\"Demo\">\n    <header className=\"Demo-header\">DataViewer demo</header>\n    <DataViewer {...{data, standardize}} />\n  </div>\n)\n\nexport default Demo\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import 'babel-polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Demo from './Demo'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Demo />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}